專題程式應用技術整合報告

1. 繼承 (Inheritance)
使用子類別 GuestForm 繼承自 AccountForm，以達到限制功能（訪客無法新增或查看記錄）。
程式碼範例：
public partial class GuestForm : AccountForm
{
    public GuestForm() : base("訪客")
    {
        InitializeComponent();
        this.Load += GuestForm_Load;
    }

    private void GuestForm_Load(object sender, EventArgs e)
    {
        base.AccountForm_Load(sender, e);
        buttonEat.Enabled = false;
        buttonProvide.Enabled = false;
        labelAccount.Text = "身份：訪客（僅能查詢）";
    }
}

2. 例外處理 (Exception Handling)
處理 JSON 檔案讀取錯誤，例如讀取帳號或紀錄資料失敗時顯示提示。
程式碼範例：
try
{
    string json = File.ReadAllText(filePath, Encoding.UTF8);
    store = JsonSerializer.Deserialize<AccountStore>(json);
}
catch (Exception ex)
{
    MessageBox.Show("讀取帳號資料失敗，原因：" + ex.Message);
}

3. 多型 (Polymorphism)
利用 virtual/override 在 GuestForm 中覆寫 AccountForm 的方法來達到不同行為。
程式碼範例：
protected virtual void buttonProvide_Click(object sender, EventArgs e)
{
    ProvideForm pf = new ProvideForm();
    pf.Show();
}

protected override void buttonProvide_Click(object sender, EventArgs e)
{
    MessageBox.Show("訪客無法新增資料！");
}

4. 委派 (Delegate)
透過事件綁定，讓所有食物按鈕統一由同一事件處理函數處理（FoodButton_Click）。
程式碼範例：
foreach (Control ctrl in panel1.Controls)
{
    if (ctrl is Button btn && btn.Name.StartsWith("btn"))
    {
        btn.Click += FoodButton_Click;
    }
}

5. 巢狀類別 (Nested Class)
在 Form1.cs 中定義嵌套類別 AccountStore 和 Record 管理資料結構。
程式碼範例：
public class AccountStore
{
    public List<string> Accounts { get; set; } = new List<string>();
}

public class Record
{
    public string 日期 { get; set; }
    public string 星期 { get; set; }
    public string 餐別 { get; set; }
    public string 食物 { get; set; }
    public string 備註 { get; set; }
    public string 時間 { get; set; }
}

